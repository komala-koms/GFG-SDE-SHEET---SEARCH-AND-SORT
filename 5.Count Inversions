public static long merge(long arr[],int low,int mid,int high)
    {
        long temp[] = new long[high-low+1];
        int i = low;
        int j = mid;
        int k=0;
        long inv_count  = 0;
        while(i<mid && j<=high)
        {
            if(arr[i] <= arr[j])
            {
                temp[k++] = arr[i++];
            }
            else
            {
                temp[k++] = arr[j++];
                inv_count += (mid-i);
            }
        }
        while(i<mid)
        {
            temp[k++] = arr[i++];
        }
        while(j<=high)
        {
            temp[k++] = arr[j++];
        }
        for(i=low;i<=high;i++)
        {
            arr[i] = temp[i-low];
        }
        return inv_count;
    }
    
    public static long mergeSort(long arr[],int low,int high)
    {
        
        long inv_count =0;
        if(low<high)
        {
            int mid = (low+high)/2;
            inv_count+=mergeSort(arr,low,mid);
            inv_count+=mergeSort(arr,mid+1,high);
            inv_count+=merge(arr,low,mid+1,high);
        }
        return inv_count;
    }
    
    static long inversionCount(long arr[], long N)
    {
        // Your Code Here
        int n = arr.length;
        
        return mergeSort(arr,0,n-1);
    }
